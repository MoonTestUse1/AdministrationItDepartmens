"""Telegram bot utils"""
import os
from fastapi import APIRouter, Request
from telebot import TeleBot
from telebot.types import Update
from ..models.request import RequestStatus, RequestPriority
from ..database import SessionLocal
from ..models.request import Request as DBRequest

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
WEBHOOK_URL = "https://itformhelp.ru/telegram/webhook/"
WEBHOOK_PATH = "/telegram/webhook/"

bot = TeleBot(TELEGRAM_BOT_TOKEN)
router = APIRouter()

@router.post(WEBHOOK_PATH)
async def handle_webhook(request: Request):
    """Handle webhook from Telegram"""
    json_string = await request.json()
    update = Update.de_json(json_string)
    bot.process_new_updates([update])
    return {"ok": True}

def setup_webhook():
    """Setup webhook"""
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)

@bot.message_handler(commands=['start'])
def start(message):
    """Handle /start command"""
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ —Å—Ç–∞—Ç—É—Å–µ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫.")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    """Handle all messages"""
    bot.reply_to(message, "–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ!")

def format_priority(priority: str) -> str:
    """Format priority with emoji"""
    priority_emoji = {
        RequestPriority.LOW: "üü¢",
        RequestPriority.MEDIUM: "üü°",
        RequestPriority.HIGH: "üî¥"
    }
    return f"{priority_emoji.get(priority, '‚ö™')} {priority.capitalize()}"

def notify_new_request(request_id: int):
    """Send notification about new request"""
    try:
        db = SessionLocal()
        request = db.query(DBRequest).filter(DBRequest.id == request_id).first()
        if request:
            message = (
                f"üìã <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request.id}</b>\n\n"
                f"üìù <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {request.title}\n"
                f"üë§ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {request.employee.last_name} {request.employee.first_name}\n"
                f"‚ùó <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {format_priority(request.priority)}\n\n"
                f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{request.description}"
            )
            bot.send_message(TELEGRAM_CHAT_ID, message, parse_mode="HTML")
    except Exception as e:
        print(f"Error sending telegram notification: {e}")
    finally:
        db.close()

def notify_status_change(request_id: int, new_status: RequestStatus):
    """Notify user about request status change"""
    try:
        db = SessionLocal()
        request = db.query(DBRequest).filter(DBRequest.id == request_id).first()
        if request and request.employee and request.employee.telegram_id:
            status_messages = {
                RequestStatus.NEW: "—Å–æ–∑–¥–∞–Ω–∞",
                RequestStatus.IN_PROGRESS: "–≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É",
                RequestStatus.COMPLETED: "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
                RequestStatus.REJECTED: "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            }
            message = f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ ‚Ññ{request.id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_messages.get(new_status, new_status)}"
            bot.send_message(request.employee.telegram_id, message)
    except Exception as e:
        print(f"Error sending telegram notification: {e}")
    finally:
        db.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
setup_webhook()